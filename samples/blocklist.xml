<?xml version="1.0" encoding="utf-8"?>
<BlockList>
    <Blocked>
        <ClassName>io.reactivex.rxjava3.core.Observable</ClassName>
        <FunctionName>hide</FunctionName>
        <ErrorMessage><![CDATA[There should be no reason to defend against downcasting an Observable to  an implementation type like Relay or Subject in a closed codebase. Doing this incurs  needless runtime memory and performance overhead. Relays and Subjects both extend from  Observable and can be supplied to functions accepting Observable directly. When  returning a Relay or Subject, declare the return type explicitly as Observable  (e.g., fun foo(): Observable<Foo> = fooRelay).]]></ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>io.reactivex.rxjava3.core.Flowable</ClassName>
        <FunctionName>hide</FunctionName>
        <ErrorMessage><![CDATA[There should be no reason to defend against downcasting an Flowable to an implementation type like FlowableProcessor in a closed codebase. Doing this incurs needless runtime memory and performance overhead. FlowableProcessor extends from Flowable and can be supplied to functions accepting Flowable directly. When returning a FlowableProcessor, declare the return type explicitly as Flowable (e.g., fun foo(): Flowable<Foo> = fooProcessor).]]></ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>io.reactivex.rxjava3.core.Completable</ClassName>
        <FunctionName>hide</FunctionName>
        <ErrorMessage><![CDATA[There should be no reason to defend against downcasting a Completable to an implementation type like CompletableSubject in a closed codebase. Doing this incurs needless runtime memory and performance overhead. CompletableSubject extends from Completable and can be supplied to functions accepting Completable directly. When returning a CompletableSubject, declare the return type explicitly as Completable (e.g., fun foo(): Completable<Foo> = fooSubject).]]></ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>io.reactivex.rxjava3.core.Maybe</ClassName>
        <FunctionName>hide</FunctionName>
        <ErrorMessage><![CDATA[There should be no reason to defend against downcasting a Maybe to an implementation type like MaybeSubject in a closed codebase. Doing this incurs needless runtime memory and performance overhead. MaybeSubject extends from Maybe and can be supplied to functions accepting Maybe directly. When returning a MaybeSubject, declare the return type explicitly as Maybe (e.g., fun foo(): Maybe<Foo> = fooSubject).]]></ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>io.reactivex.rxjava3.core.Single</ClassName>
        <FunctionName>hide</FunctionName>
        <ErrorMessage><![CDATA[There should be no reason to defend against downcasting a Single to an implementation type like SingleSubject in a closed codebase. Doing this incurs needless runtime memory and performance overhead. SingleSubject extends from Single and can be supplied to functions accepting Single directly. When returning a SingleSubject, declare the return type explicitly as Single (e.g., fun foo(): Single<Foo> = fooSubject).]]></ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>androidx.core.content.ContextCompat</ClassName>
        <FunctionName>getDrawable</FunctionName>
        <Parameter>android.content.Context</Parameter>
        <Parameter>int</Parameter>
        <ErrorMessage>Use Context#getDrawableCompat() instead</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>androidx.core.content.res.ResourcesCompat</ClassName>
        <FunctionName>getDrawable</FunctionName>
        <Parameter>android.content.Context</Parameter>
        <Parameter>int</Parameter>
        <ErrorMessage>Use Context#getDrawableCompat() instead</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>android.support.test.espresso.matcher.ViewMatchers</ClassName>
        <FunctionName>withId</FunctionName>
        <Parameter>int</Parameter>
        <ErrorMessage>Consider matching the content description instead. IDs are implementation details of how a screen is built, not how it works. You can't tell a user to click on the button with ID 428194727 so our tests should not be doing that.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>android.view.View</ClassName>
        <FunctionName>setOnClickListener</FunctionName>
        <Parameter>android.view.View.OnClickListener</Parameter>
        <Arguments>null</Arguments>
        <ErrorMessage>This fails to also set View#isClickable. Use View#clearOnClickListener() instead</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>kotlinx.coroutines.flow.FlowKt__CollectKt</ClassName>
        <FunctionName>launchIn</FunctionName>
        <ErrorMessage>Use the structured concurrent CoroutineScope#launch and Flow#collect APIs instead of reactive Flow#onEach and Flow#launchIn. Suspend calls like Flow#collect can be refactored into standalone suspend funs and mixed in with regular control flow in a suspend context, but calls that invoke CoroutineScope#launch and Flow#collect at the same time hide the suspend context, encouraging the developer to continue working in the reactive domain.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>androidx.viewpager2.widget.ViewPager2</ClassName>
        <FunctionName>setId</FunctionName>
        <Parameter>int</Parameter>
        <Arguments>ViewCompat.generateViewId()</Arguments>
        <ErrorMessage>Use an id defined in resources or a statically created instead of generating with ViewCompat.generateViewId(). See https://issuetracker.google.com/issues/185820237</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>androidx.viewpager2.widget.ViewPager2</ClassName>
        <FunctionName>setId</FunctionName>
        <Parameter>int</Parameter>
        <Arguments>View.generateViewId()</Arguments>
        <ErrorMessage>Use an id defined in resources or a statically created instead of generating with View.generateViewId(). See https://issuetracker.google.com/issues/185820237</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>java.util.LinkedList</ClassName>
        <FunctionName><![CDATA[<init>]]></FunctionName>
        <ErrorMessage>For a stack/queue/double-ended queue use ArrayDeque, for a list use ArrayList. Both are more efficient internally.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>java.util.Stack</ClassName>
        <FunctionName><![CDATA[<init>]]></FunctionName>
        <ErrorMessage>For a stack use ArrayDeque which is more efficient internally.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>java.util.Vector</ClassName>
        <FunctionName><![CDATA[<init>]]></FunctionName>
        <ErrorMessage>For a vector use ArrayList or ArrayDeque which are more efficient internally.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>io.reactivex.rxjava3.schedulers.Schedulers</ClassName>
        <FunctionName>newThread</FunctionName>
        <ErrorMessage>Use a scheduler which wraps a cached set of threads. There should be no reason to be arbitrarily creating threads on Android.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>kotlinx.coroutines.rx3.RxCompletableKt</ClassName>
        <FunctionName>rxCompletable</FunctionName>
        <Parameter>kotlin.coroutines.CoroutineContext</Parameter>
        <Parameter><![CDATA[kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object>]]></Parameter>
        <Arguments>*</Arguments>
        <ErrorMessage>rxCompletable defaults to Dispatchers.Default, which will silently introduce multithreading. Provide an explicit dispatcher. Dispatchers.Unconfined is usually the best choice, as it behaves in an rx-y way.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>kotlinx.coroutines.rx3.RxMaybeKt</ClassName>
        <FunctionName>rxMaybe</FunctionName>
        <Parameter>kotlin.coroutines.CoroutineContext</Parameter>
        <Parameter><![CDATA[kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope,? super kotlin.coroutines.Continuation<? super T>,? extends java.lang.Object>]]></Parameter>
        <ErrorMessage>rxMaybe defaults to Dispatchers.Default, which will silently introduce multithreading. Provide an explicit dispatcher. Dispatchers.Unconfined is usually the best choice, as it behaves in an rx-y way.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>kotlinx.coroutines.rx3.RxSingleKt</ClassName>
        <FunctionName>rxSingle</FunctionName>
        <Parameter>kotlin.coroutines.CoroutineContext</Parameter>
        <Parameter><![CDATA[kotlin.jvm.functions.Function2<? super kotlinx.coroutines.CoroutineScope,? super kotlin.coroutines.Continuation<? super T>,? extends java.lang.Object>]]></Parameter>
        <Arguments>*</Arguments>
        <ErrorMessage>rxSingle defaults to Dispatchers.Default, which will silently introduce multithreading. Provide an explicit dispatcher. Dispatchers.Unconfined is usually the best choice, as it behaves in an rx-y way.</ErrorMessage>
    </Blocked>
    <Blocked>
        <ClassName>kotlinx.coroutines.rx3.RxObservableKt</ClassName>
        <FunctionName>rxObservable</FunctionName>
        <Parameter>kotlin.coroutines.CoroutineContext</Parameter>
        <Parameter><![CDATA[kotlin.jvm.functions.Function2<? super kotlinx.coroutines.channels.ProducerScope<T>,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,? extends java.lang.Object>]]></Parameter>
        <Arguments>*</Arguments>
        <ErrorMessage>rxObservable defaults to Dispatchers.Default, which will silently introduce multithreading. Provide an explicit dispatcher. Dispatchers.Unconfined is usually the best choice, as it behaves in an rx-y way.</ErrorMessage>
    </Blocked>
</BlockList>